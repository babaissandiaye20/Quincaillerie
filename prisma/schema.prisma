// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  utilisateurs Utilisateur[]
}

model Utilisateur {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  nom       String
  prenom    String
  isActive  Boolean  @default(true)
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categorie {
  id             Int              @id @default(autoincrement())
  nom            String           @unique
  description    String?
  isArchived     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  sousCategories SousCategorie[]
}

model SousCategorie {
  id            Int         @id @default(autoincrement())
  nom           String
  description   String?
  categorieId   Int
  categorie     Categorie   @relation(fields: [categorieId], references: [id])
  isArchived    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  produits      Produit[]
}

model Produit {
  id                Int              @id @default(autoincrement())
  nom               String
  description       String?
  prix              Float
  stock             Int              @default(0)
  imagePath         String?
  sousCategorieId   Int
  sousCategorie     SousCategorie    @relation(fields: [sousCategorieId], references: [id])
  fournisseurId     Int
  fournisseur       Fournisseur      @relation(fields: [fournisseurId], references: [id])
  isArchived        Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  ligneCommandes    LigneCommande[]
}

model Fournisseur {
  id         Int         @id @default(autoincrement())
  numero     String      @unique
  nom        String
  email      String?
  telephone  String?
  adresse    String?
  isArchived Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  commandes  Commande[]
  produits   Produit[]
}

model Commande {
  id             Int             @id @default(autoincrement())
  numero         String          @unique
  date           DateTime        @default(now())
  etat           EtatCommande    @default(ENCOURS)
  montantTotal   Float           @default(0)
  fournisseurId  Int
  fournisseur    Fournisseur     @relation(fields: [fournisseurId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ligneCommandes LigneCommande[]
  paiements      Paiement[]
}

model LigneCommande {
  id         Int      @id @default(autoincrement())
  quantite   Int
  prixUnitaire Float
  produitId  Int
  commandeId Int
  createdAt  DateTime @default(now())
  produit    Produit  @relation(fields: [produitId], references: [id])
  commande   Commande @relation(fields: [commandeId], references: [id])
}

model Paiement {
  id         Int      @id @default(autoincrement())
  montant    Float
  date       DateTime @default(now())
  commandeId Int
  createdAt  DateTime @default(now())
  commande   Commande @relation(fields: [commandeId], references: [id])
}

enum EtatCommande {
  ENCOURS
  LIVRE
  PAYE
  ANNULE
}
